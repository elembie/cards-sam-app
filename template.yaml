AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template for card game websocket backend


Parameters:

  EnvironmentParam:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

  TableNameParam:
    Type: String
    Default: 'cards-app-table'


Globals:
  Function:
    Timeout: 3
    Runtime: python3.7
    Environment:
      Variables:
        TABLE_NAME: !Ref TableNameParam
        ENV: !Ref EnvironmentParam


Resources:

  # -- HTTP API --
  CardGameHttpApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: CardGameHttpApi
      StageName: dev
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CardsCognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers: 
          CardsCognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt CardsCognitoUserPool.Arn 
    
  UserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: services/users
      Handler: service.handler.handle
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameParam
      Events:
        GetOrCreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref CardGameHttpApi
            Path: /user
            Method: GET
        GetUser:
            Type: Api
            Properties:
              RestApiId: !Ref CardGameHttpApi
              Path: /user/{user_id}
              Method: GET

  GamesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: services/games/meta
      Handler: service.handler.handle
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameParam
      Events:
        CreateGame:
          Type: Api
          Properties:
            RestApiId: !Ref CardGameHttpApi
            Path: /games
            Method: POST
        GetGamesPaginated:
          Type: Api
          Properties:
            RestApiId: !Ref CardGameHttpApi
            Path: /games
            Method: GET
        GetGame:
          Type: Api
          Properties:
            RestApiId: !Ref CardGameHttpApi
            Path: /games/{game_id}
            Method: GET
        ExitGame:
          Type: Api
          Properties:
            RestApiId: !Ref CardGameHttpApi
            Path: /games/{game_id}/users/{user_id}
            Method: DELETE
  
  CardsCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cards-cognito-user-pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CardsCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:  
        - implicit 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - phone
        - email
        - openid
        - profile
      CallbackURLs: 
        - http://localhost
      ClientName: cards-cognito-user-pool-client
      DefaultRedirectURI: http://localhost
      GenerateSecret: false
      LogoutURLs: 
        - http://localhost
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 7
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref CardsCognitoUserPool

  CardsCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !GetAtt CardGameHttpApi.RootResourceId
      UserPoolId: !Ref CardsCognitoUserPool
  
  PreSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/presignup/
      InlineCode: |
        def handler(event, context):
          event['response']['autoConfirmUser'] = False
          return event
      Handler: index.handler
      MemorySize: 128
      
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CardsCognitoUserPool}'

  # -- WEB SOCKETS --  
  CardGameWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: CardGameWebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CardGameWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CardGameWebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
            
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CardGameWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CardGameWebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: 
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref CardGameWebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref EnvironmentParam
      Description: Development stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref CardGameWebSocketApi

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/connections/
      Handler: connect.handle
      MemorySize: 256
      

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - CardGameWebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/connections/
      Handler: disconnect.handle
      MemorySize: 256
      

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - CardGameWebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  # -- DATABASE --
  CardsAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "pk"
        AttributeType: "S"
      - AttributeName: "sk"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "pk"
        KeyType: "HASH"
      - AttributeName: "sk"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableNameParam

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway websocket connect endpoint URL "
    Value: ${CardGameWebSocketApi.Arn}
  OnConnectFunctionOutput:
    Description: "On connect Lambda Function ARN"
    Value: ${OnConnectFunction.Arn}
  OnDisconnectFunctionOutput:
    Description: "On disconnect Lambda Function ARN"
    Value: ${OnDisconnectFunction.Arn}
